// Поскольку в вопросе упоминается, что в массиве существует мажоритарный элемент, мы можем отсортировать массив, и средний элемент является мажоритарным элементом. Поскольку число должно быть больше, чем n/2раз, оно должно быть в центре. Решение будет выглядеть примерно так

// Input: nums = [2,2,1,1,1,2,2]

/**
 * @param {number[]} nums
 * @return {number}
 */
var majorityElement = function (nums) {
  nums.sort((a, b) => a - b);
  const l = nums.length;
  if (l % 2 === 0) {
    return nums[l / 2];
  } else {
    // Минус один если элемент не четный
    return nums[(l - 1) / 2];
  }
};


/**
 * @param {number[]} nums
 * @return {number}
 */
//  Во-первых, я предполагаю, что элемент по индексу 0 является мажоритарным элементом.
// Объявляю две переменные majи countсохраняю индекс мажоритарного элемента и его количество
var majorityElement = function (nums) {
  let maj = 0;
  let count = 1;
  // Перебираю массив из индекса 1
  for (let num = 1; num < nums.length; num++) {
    // Если встречаю элемент и он совпадает с числом в индексе, то увеличиваю кол-во
    if (nums[num] === nums[maj]) {
      count++;
    } else if (count === 0) {
      // Если счетчик становится нулем, то меняю индекс на текущий элемент и счетчик на 1
      maj = num;
      count = 1;
    } else {
      // Если нет, тупо дикрементирую
      count--;
    }
  }
  //   Возвращаю индекс большинства
  return nums[maj];
};
